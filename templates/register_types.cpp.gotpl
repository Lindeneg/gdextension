#include "register_types.h"

#include <gdextension_interface.h>

#include <godot_cpp/core/defs.hpp>
#include <godot_cpp/godot.hpp>

{{if .WithExample}}
#include "../nodes/player.h"
{{end}}
{{if .WithLogger}}
#include "../objects/logger.h"
{{end}}

using namespace godot;

void initialize_{{.ProjectName}}_extension_module(ModuleInitializationLevel p_level) {
    if (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) {
        return;
    }
{{if .WithExample}}
    ClassDB::register_class<{{.ProjectName}}::Player>();
{{end}}
{{if .WithLogger}}
    ClassDB::register_class<{{.ProjectName}}::Logger>();
{{end}}
}

void uninitialize_{{.ProjectName}}_extension_module(ModuleInitializationLevel p_level) {
    if (p_level != MODULE_INITIALIZATION_LEVEL_SCENE) {
        return;
    }
}

extern "C" {
GDExtensionBool GDE_EXPORT {{.ProjectName}}_extension_library_init(
    GDExtensionInterfaceGetProcAddress p_get_proc_address,
    const GDExtensionClassLibraryPtr p_library,
    GDExtensionInitialization *r_initialization) {
    godot::GDExtensionBinding::InitObject init_obj(p_get_proc_address,
                                                   p_library, r_initialization);

    init_obj.register_initializer(initialize_{{.ProjectName}}_extension_module);
    init_obj.register_terminator(uninitialize_{{.ProjectName}}_extension_module);
    init_obj.set_minimum_library_initialization_level(
        MODULE_INITIALIZATION_LEVEL_SCENE);

    return init_obj.init();
}
}

